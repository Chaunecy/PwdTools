import argparse
from statistics import mean
import matplotlib.pyplot as plt


def read_guess_crack_files_for_single_pwd_model(guess_crack_files, split_chr=" : "):
    """

    :param guess_crack_files: guesses: crack files
    :param split_chr: the symbol between {guesses} and {crack}, like " : "
    :return: guesses_crack_pair
    """
    guesses_crack_pair = {}  # type: {int: [float]}
    for idx, guess_crack_file in enumerate(guess_crack_files):
        fin = open(guess_crack_file, "r")
        for line in fin:
            line = line.strip("\r\n")
            str_guesses, _, str_cracked_ratio = line.split(split_chr)
            guesses = int(str_guesses)
            cracked_ratio = float(str_cracked_ratio)
            if guesses in guesses_crack_pair:
                guesses_crack_pair[guesses].append(cracked_ratio)
            else:
                guesses_crack_pair[guesses] = [cracked_ratio]
        fin.close()
    return {k: mean(guesses_crack_pair.get(k)) for k in guesses_crack_pair}  # type: {int: float}
    pass


def draw_guess_crack_curve_for_single_pwd_model(guesses_crack_pair: {int: float}, pwd_model, curve_filename):
    """

    :param pwd_model:
    :param guesses_crack_pair: generated by read_guess_crack_files
    :param curve_filename: filename to save the figure
    :return:
    """
    guesses = list(guesses_crack_pair.keys())  # type: [int]
    guesses.sort()
    x = []
    y = []
    for guess_number in guesses:
        x.append(guess_number)
        y.append(guesses_crack_pair.get(guess_number))
    ax = plt.subplot2grid((1, 1), (0, 0))
    ax.set_xscale("log")
    """
    Simple linestyles can be defined using the strings "solid", "dotted", "dashed" or "dashdot". 
    More refined control can be achieved by providing a dash tuple (offset, (on_off_seq)). 
    For example, (0, (3, 10, 1, 15)) means (3pt line, 10pt space, 1pt line, 15pt space) with no offset
    """
    ax.plot(x, y, "red", linewidth=1.5, linestyle=(0, ()), label=pwd_model)
    plt.xlabel("Guesses")
    plt.ylabel("Percentage cracked(%)")
    plt.grid(ls="--")
    # font = {
    #     "family": "Times New Roman",
    #     "weight": "normal",
    #     "size": 11
    # }
    plt.subplots_adjust(left=0.1, right=.95, top=.95, bottom=.1)
    plt.savefig("%s.png" % curve_filename)
    plt.savefig("%s.pdf" % curve_filename)
    return 0
    pass


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Guess-Crack Curve")
    parser.add_argument("--files", "-f", required=True, nargs="+", help="a list of guess-crack files")
    parser.add_argument("--split", "-x", default=" : ", help="splitter of guess-crack pair")
    parser.add_argument("--model", "-m", required=True, help="label of curve")
    parser.add_argument("--save", "-s", required=True, help="where to store the curve, without suffix")
    args = parser.parse_args()
    print(args.save)
    for i in args.files:
        print(i)
    guess_crack_pairs = read_guess_crack_files_for_single_pwd_model(args.files, args.split)
    draw_guess_crack_curve_for_single_pwd_model(guess_crack_pairs, args.model, args.save)
    pass
